R"===(

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

uniform layout(binding = 0, rgb10_a2ui) uimageBuffer flist_P;
uniform layout(binding = 1, r32ui) uimageBuffer octree_nodes;
uniform u32 octree_level;
uniform u32 octree_resolution;
uniform u32 fragment_count;

#define MSB 0x80000000
#define OCTREE_LEVEL 10

void main()
{
    u32 tid = (gl_GlobalInvocationID.y << 10) + gl_GlobalInvocationID.x;
    if (tid < fragment_count)
    {
        uv4 coord   = imageLoad(flist_P, s32(tid));
        u32 idx     = 0;
        u32 node    = 0;

        // Traverse down the node pool.
        for (u32 level = 0;
             level < octree_level;
             ++level)
        {
            u32 s = (OCTREE_LEVEL - level);
            uv4 sub = coord;
            sub >>= s;
            u32 offset = sub.x + (sub.y << 1) + (sub.z << 2);
            sub <<= s;
            coord -= sub;
            idx = node + offset;

            node = (imageLoad(octree_nodes, s32(idx)).r & 0x7fffffff);
        }

        // Since storing occurs on the last level, it is safe to ignore
        // lower 31 bits since it points to no node.
        imageStore(octree_nodes, s32(idx), uv4(MSB, 0, 0, 0));
    }
}

)===";
