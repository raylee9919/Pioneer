R"===(

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

uniform layout(binding = 0, rgb10_a2ui) uimageBuffer flist_P;
uniform layout(binding = 1, r32ui) uimageBuffer octree_nodes;
uniform u32 octree_level;
uniform u32 octree_resolution;
uniform u32 fragment_count;

#define MSB 0x80000000

void main()
{
    u32 tid = gl_GlobalInvocationID.y * 1024 + gl_GlobalInvocationID.x;
    if (tid < fragment_count)
    {
        if (octree_level != 0)
        {
            uv4 coord = imageLoad(flist_P, s32(tid));

            u32 idx_to_write    = 0;
            u32 div             = octree_resolution;
            u32 node            = (imageLoad(octree_nodes, 0).r & 0x7fffffff);

            // Traverse down the node pool.
            for (u32 level = 0;
                 level < octree_level;
                 ++level)
            {
                u32 sr = (octree_level - level);
                u32 x = (coord.x >> sr);
                u32 y = (coord.y >> sr);
                u32 z = (coord.z >> sr);
                u32 offset = (z<<2) + (y<<1) + x;
                idx_to_write = node + offset;

                node = (imageLoad(octree_nodes, s32(idx_to_write)).r & 0x7fffffff);

                div >>= 1;
            }

            // Since storing occurs on the last level, it is safe to ignore
            // lower 31 bits since it points to no node.
            imageStore(octree_nodes, s32(idx_to_write), uv4(MSB, 0, 0, 0));
        }
        else
        {
            imageStore(octree_nodes, 0, uv4(MSB, 0, 0, 0));
        }
    }
}

)===";
