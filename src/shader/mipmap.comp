R"===(

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

uniform layout(binding = 0, r32ui) uimageBuffer octree_nodes;
uniform layout(binding = 1, r32ui) uimageBuffer octree_diffuse;

uniform u32 level_start;
uniform u32 level_end;

void main()
{
    u32 tid = (gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x) * 64 + gl_LocalInvocationIndex;
    u32 idx = level_start + tid;
    if (idx < level_end)
    {
        u32 val = imageLoad(octree_nodes, s32(idx)).r;
        if ((val & 0x80000000) != 0)
        {
            u32 child_node = (val & 0x7fffffff);

            v4 result = v4(0);

            for (u32 i = 0; i < 8; ++i)
            {
                u32 child = (child_node + i);
                //u32 child_flag_val = imageLoad(octree_nodes, s32(child)).r;
                v4 diffuse = rgba8_to_v4(imageLoad(octree_diffuse, s32(child)).r);

                //if ((child_flag_val & 0x80000000) != 0) // @TODO: this doesn't work... why???
                if (diffuse.a != 0.0f)
                {
                    result.rgb += (diffuse.rgb * diffuse.a);
                    result.a += diffuse.a;
                }
            }

            if (result.a != 0.0f)
            {
                result.rgb /= result.a;
                imageStore( octree_diffuse, s32(idx), uv4(v4_to_rgba8(result), 0, 0, 0) );
            }
        }
    }

}

)===";
