












                            Theme 0. CPU SIMD

  Unaligned Store can be pretty expensive. Most of the time, you wanna keep the 
perspective to keep things aligned. Since, We are now using 128-bit wide vector,
memory must be aligned to 4-bytes, which means the lowest 1-byte of the memory
address must be cleared to zero.


  128-bit wide SIMD, the hardest problem for me was hoisting out the for loop
fetching texels from bitmap data. Since it atomically fetches 4 pixel data, it
could really read from invalid memory, which is outside of the bitmap memory
boundary.
  A solution that emerged was clipping U and V. Then it is guaranteed to read
from valid memory. But, it isn't the value we want to do math with and write to
the screen buffer. And that's another problem. A solution for this is generating
mask with SIMD comparison instructions. Whatever wrong values we read, as long as
we read from valid memory, we will knock out the values with generated mask.
  Sadly, it seems like there's no such thing like SIMD fetch. So, for loop for
fetching texel will stay. What can I say?






                            Theme 1. Asset System




                                Theme 2. Font

Character Set Encoding
ASCII / ANSI

For example, the symbol for meat(肉) in Chinese has no encoding in ASCII.
256(8 bits) glyphs are all you will get out of ASCII.
Even in a basic situation, you need at least 3000 symbols in Chinese lettering.

Recently, moved to UNICODE, encoding drastically more characters.
UTF-16 -> UTF-8
UTF-8 is a variable-length encoding. It is 8 bit character, but can double up the
characters, chain them.

0. Glyphs
1. Unicode

Pros :)
All glyphs have found their home. A single font can describe all of the symbols
human has ever used.

Cons :(
You are stuck with that giant encoding. 16 million is way too big. Most of them
will be 0. Universally describing any language is pretty darn nasty.

"Code Point" refers to the numerical slot that has been reserved for
particular glyph.


2. Basic Typography

"gh" -> 'g' has a descender, while 'h' has an ascender. How does character glyph
relate to the basline? What is the maximum descender height? What is the 
maximum ascender height? Those are considerations in typography.

<Mono or Mono-Spaced> -> old school terminal, typewriter.
Spaces are consistent. Looks dumb.
                            vs
<Proportional>
Naive: Constant spacing for each letter.
Problem: "ij" can be closer than "gj".
The point being, the distance between letters heavily depend on the "pair" of
letters.

"Kerning" typically refers to the delta between the normal spacing and
pair spacing.

e.g.
A|B|Kerning
------------
g|j|  -5

If u are trying to make fonts that appear very tiny, there may be things
you might want not to do. "Hints" offer those info.


3. Font Rendering

option1) Load TTF -> Turn in to triangles (Tessellation) and get outlined-
  version of it. There's a caveat in it.
  'S' -> have to pick some degree of fidelity of curves.

option2) Load TTF -> Implicit Rasterization = Is pixel in a shape or not? 
  Works in any resolution. Always, perfectly smooth curve. 99.9999%... it is an
  overkill. Most games know their target resolution and font size.

option3) Prerasterized Fonts ★★★
  Build bitmaps that capture the font at certain resolution, like 1920x1080.
  We will simply blt from the bitmap. No matter how complicated the glyph is,
  no big change in performance. If you are in US, no worry about LICENSE for
  this method. Other methods are technically software. There was a ruling that
  says font files are instructions to computer on how to generate font in any
  resolution, that is copywritable as "SOFTWARE". Font is still not copywritable.
  If you were to trace your own outline, that is legal. Resulting font shape is
  not copywritable. It's just an image.

Font may be colored in fly. It can be monochrome which is 8-bit value, how much
coverage was.

To sum it up, we need
    Captured Font + Code Points + Rect Positioning Info + Kerning Table
    




STB Library
Create by 'S'ean 'T'. 'B'arrett

We'll use stb_truetype.h
They are sensibly made, integrates very cleanly.







