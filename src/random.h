#ifndef RANDOM_H
 /* ========================================================================
    $File: $
    $Date: $
    $Revision: $
    $Creator: Sung Woo Lee $
    $Notice: (C) Copyright 2024 by Sung Woo Lee. All Rights Reserved. $
    ======================================================================== */

u32 RandomTable[] = {
        0x4adbd8c8, 0x0580441e, 0x5948352a, 0xf8de5633, 0x8bc4daea, 0xe33507bb, 0x475ee888, 0x657559b3,
        0x7e702e7a, 0xf9c24d3b, 0x874263d0, 0xe1bf5b9a, 0xec368801, 0x6674dbf0, 0x7a3cf246, 0x2e202b48,
        0xa629413f, 0x7aafb49c, 0xf4fc957a, 0x9971d664, 0xcdc240d2, 0x40f04cce, 0xdf080090, 0xaa20909e,
        0xf62be2b7, 0x64232f96, 0xf92ee852, 0xf52738bc, 0x365a90ae, 0x44067137, 0xcdf7648e, 0x1554804b,
        0xa31697d6, 0xafae712f, 0xad0509c2, 0x28bc1345, 0xf4d8939a, 0x41dfac72, 0xe05736c3, 0x88267a6e,
        0xc4b402bb, 0x01a3d01c, 0xfcdd13f9, 0x5747b26c, 0xbf4989f6, 0xa7005bf4, 0x9a473469, 0xfa5aa840,
        0x4fc4f318, 0x09fc2dc4, 0x32b12fed, 0xb84cc18c, 0x65397144, 0x670296c8, 0x98b90b60, 0x73948031,
        0xe119be2b, 0xb00cb102, 0x1f020571, 0xa2027207, 0xc5487d14, 0x163284f1, 0x1a434f4f, 0xa47fcf5a,
        0xf2902d6d, 0xfe6ec4c1, 0x1218b809, 0x37d4d589, 0x60180f8f, 0xfe057e53, 0xabd3e4f1, 0xf1c8fd39,
        0xaa47a168, 0x0ff30302, 0x3b509cce, 0x6dcbc873, 0xebd31c78, 0xc21c90f3, 0x3834a25c, 0x151bfb38,
        0x34886374, 0xe7b82ec9, 0x190c31da, 0xafa85061, 0x3d0301df, 0x6daafeb6, 0x5740dc22, 0x47121063,
        0xf4446c4b, 0x1725b583, 0x61382163, 0xb19c28d6, 0x9a496893, 0xd793ab7a, 0xafbb42bb, 0xe9d65905,
        0x8d03ab8e, 0xc554a501, 0x97449452, 0xf696d954, 0x1eff8d7b, 0xd6e377cc, 0xdc0f875c, 0x95563d9e,
        0xa69b916f, 0x29c9ee26, 0xafe32ecd, 0x4c3a00fc, 0x23068b1e, 0x2b2588c8, 0xaeb54260, 0x24080d8c,
        0x11653379, 0x32e8072b, 0x9ce6f098, 0xa1ada32f, 0x9f812b1a, 0x2d64f1e3, 0xe21bb55c, 0x8ea670b2,
        0xb8821627, 0x70538fde, 0x6791f591, 0x75577841, 0xc73bc0fa, 0xcfaf1cd8, 0x4b99eef5, 0xc55ff448,
        0x71e47d45, 0x63d291dc, 0xacab9213, 0xe0d9c5ba, 0x4bbd1d14, 0x75be1742, 0xfbc0efe8, 0xf4441774,
        0x59a36b76, 0xde68a4f1, 0x2f141a71, 0xb4fdecb5, 0x4f8ee917, 0xed5fe1b4, 0xe91b847a, 0x6d864b72,
        0xfdf719bd, 0x6fda1eec, 0x9e3d6514, 0x88e33b81, 0x02435149, 0x8a5d5342, 0xd58b7ece, 0xc2fb8c09,
        0x673da102, 0x6fd812b0, 0x22c2f4ed, 0x56e806a4, 0xa4d6371e, 0xd0c4f696, 0x7de9d29d, 0x4c190a81,
        0xced53a94, 0x13af0fea, 0xc46dacd6, 0x21997c8c, 0xc795a4a2, 0x4c938e9d, 0xe11d81b0, 0x4ec532ef,
        0x00ff7220, 0x132c59ff, 0x4b74b714, 0xb39e02b2, 0xa9b4b73e, 0xb64ecef9, 0x9f42d01a, 0x15ddc5b3,
        0x35e08900, 0x1a252846, 0xb6db38de, 0x2cddd95c, 0x45fe393f, 0x0a13a7a5, 0x07f7e248, 0x3fe2edd7,
        0x3498e774, 0xf2c49b66, 0x335e798d, 0xb15afe6d, 0xef55192c, 0xdc60a733, 0x94bdf76d, 0x4892d4de,
        0x0eb6cd3d, 0x587cce24, 0x0f02689e, 0x9ecea016, 0xa35f5cda, 0x0f3c42e2, 0xa4d06cc1, 0xeb514ea0,
        0x4b22e6e2, 0xb24bd10a, 0xae83d97d, 0x321c7ca6, 0x3e3033f6, 0xbf572aeb, 0x9ede20c2, 0xd754bbf7,
        0xe5adde04, 0xf9f9e410, 0x19734d64, 0x40037a6d, 0xc8fdfaf7, 0x36965aa8, 0x0f4e29cb, 0xa8bb4778,
        0x0b5af7b1, 0xa5c9b283, 0x60c1079d, 0x26f1e92b, 0x5d38df72, 0xf3ea4179, 0xdcd2d647, 0x459df79e,
        0x7430293b, 0xc211a047, 0xe4f16756, 0x5fb08839, 0x36364ac1, 0x7891f860, 0x3157afa9, 0x8437d189,
        0x6c4e3456, 0xbaaaf57c, 0x2d2648da, 0x9ca72f89, 0x05b9479c, 0x97f433f7, 0x890f072f, 0x5664d783,
        0xd2be2fcf, 0xa135c2f5, 0xdd76f4cf, 0xa1a1c89b, 0xc516df78, 0xa7778410, 0x999c4817, 0xb62ab4f9,
        0xcfc62ded, 0xa56f4516, 0xcb48470d, 0xd3dab148, 0x2ad646be, 0xcd6ac55b, 0x8923a5c3, 0x41998d13,
};

u32 maxInRandomTable =0xFE6EC4C1; 

struct RandomSeries {
    u32 nextIdx;
};

inline RandomSeries
Seed(u32 seed) {
    RandomSeries result = {};
    result.nextIdx = (seed % ArrayCount(RandomTable));
    return result;
}

inline u32
RandNext(RandomSeries *series) {
    u32 result = RandomTable[series->nextIdx++];
    if (series->nextIdx > ArrayCount(RandomTable)) {
        series->nextIdx = 0;
    }
    return result;
}

inline r32
RandUnilateral(RandomSeries *series) {
    r32 div = 1.0f / (r32)maxInRandomTable;
    r32 result = (r32)RandNext(series) * div;
    return result;
}

inline r32
RandBilateral(RandomSeries *series) {
    r32 result = RandUnilateral(series) * 2.0f - 1.0f;
    return result;
}

inline r32
RandRange(RandomSeries *series, r32 lo, r32 hi) {
    r32 result = Lerp(lo, hi, RandUnilateral(series));
    return result;
}

#define RANDOM_H
#endif
